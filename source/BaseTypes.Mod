(* Runtime support for basic pointer types *)
(* Copyright (C) Florian Negele *)

(** Contains the representation of the basic pointer types of Active Oberon and the meta data associated with them. *)
(** Objects are segmented into separate data structures in order to save memory because not all objects are active or need a monitor at runtime. *)
MODULE BaseTypes;

IMPORT Counters, Queues;

(** Represents a pointer type. *)
TYPE Pointer* = OBJECT {DISPOSABLE}

	VAR descriptor-: ADDRESS; (* stores the address of the type descriptor *)
	VAR cycle* := 0: LONGWORD; (* stores the last garbage collection cycle which reached the pointer *)
	VAR references*: Counters.Counter; (* counts how many times the pointer is referenced by local variables *)
	VAR nextMarked* {UNTRACED} := NIL: Pointer; (* stores the next item in the linked list of marked pointers *)
	VAR nextWatched* {UNTRACED} := NIL: Pointer; (* stores the next item in the linked list of watched pointers *)

	PROCEDURE Trace-;
	BEGIN {UNCOOPERATIVE, UNCHECKED}
	END Trace;

END Pointer;

(** Represents a stack frame of an activity. *)
TYPE StackFrame* = OBJECT {UNSAFE}

	VAR descriptor*: ADDRESS;
	VAR previous*: ADDRESS;
	VAR caller*: PROCEDURE;

	(** Moves the stack frame by updating all references to the stack. *)
	(** This procedure is generated by the compiler and moves variable parameters. *)
	PROCEDURE Move- (offset: SIZE; stackTop: ADDRESS);
	BEGIN {UNCOOPERATIVE, UNCHECKED} IF previous # NIL THEN INC (previous, offset) END;
	END Move;

	(** Resets the stack frame by resetting all local variables containing pointers. *)
	(** This procedure is generated by the compiler and resets local variables and parameters. *)
	PROCEDURE Reset-;
	BEGIN {UNCOOPERATIVE, UNCHECKED}
	END Reset;

END StackFrame;

END BaseTypes.