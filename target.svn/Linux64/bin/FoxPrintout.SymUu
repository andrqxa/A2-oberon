MODULE FoxPrintout;
	IMPORT Scanner := FoxScanner, SyntaxTree := FoxSyntaxTree, Global := FoxGlobal, Basic := FoxBasic, Fingerprinter := FoxFingerprinter, Streams, D := Debugging, SYSTEM;
CONST 
	Exported* = 0; 
	SymbolFile* = 1; 
	SourceCode* = 2; 
	All* = 3; 
	DebugPosition = FALSE; 
TYPE 
	Printer* = OBJECT (SyntaxTree.Visitor)
	VAR 
		w-: Basic.Writer; 
		mode: SIGNED32; 
		singleStatement: BOOLEAN; 
		currentScope: SyntaxTree.Scope; 
		ws: Streams.StringWriter; 
		info: BOOLEAN; 
		case: SIGNED32; 
		useCase: BOOLEAN; 
		alertCount, commentCount: SIGNED32; 
		fingerprinter: Fingerprinter.Fingerprinter; 

		PROCEDURE ^ Small(CONST name: ARRAY OF CHAR; VAR result: ARRAY OF CHAR); 
		PROCEDURE ^ Big(CONST name: ARRAY OF CHAR; VAR result: ARRAY OF CHAR); 
		PROCEDURE ^ Keyword(CONST a: ARRAY OF CHAR); 
		PROCEDURE ^ AlertString(CONST s: ARRAY OF CHAR); 
		PROCEDURE ^ Indent; 
		PROCEDURE ^ Identifier*(x: SyntaxTree.Identifier); 
		PROCEDURE ^ QualifiedIdentifier*(x: SyntaxTree.QualifiedIdentifier); 
		PROCEDURE ^ Type*(x: SyntaxTree.Type); 
		PROCEDURE ^ {OVERRIDE} VisitType*(x: SyntaxTree.Type); 
		PROCEDURE ^ {OVERRIDE} VisitBasicType*(x: SyntaxTree.BasicType); 
		PROCEDURE ^ {OVERRIDE} VisitBooleanType*(x: SyntaxTree.BooleanType); 
		PROCEDURE ^ {OVERRIDE} VisitSetType*(x: SyntaxTree.SetType); 
		PROCEDURE ^ {OVERRIDE} VisitSizeType*(x: SyntaxTree.SizeType); 
		PROCEDURE ^ {OVERRIDE} VisitCharacterType*(x: SyntaxTree.CharacterType); 
		PROCEDURE ^ {OVERRIDE} VisitIntegerType*(x: SyntaxTree.IntegerType); 
		PROCEDURE ^ {OVERRIDE} VisitFloatType*(x: SyntaxTree.FloatType); 
		PROCEDURE ^ {OVERRIDE} VisitComplexType*(x: SyntaxTree.ComplexType); 
		PROCEDURE ^ {OVERRIDE} VisitByteType*(x: SyntaxTree.ByteType); 
		PROCEDURE ^ {OVERRIDE} VisitQualifiedType*(x: SyntaxTree.QualifiedType); 
		PROCEDURE ^ {OVERRIDE} VisitStringType*(x: SyntaxTree.StringType); 
		PROCEDURE ^ {OVERRIDE} VisitEnumerationType*(x: SyntaxTree.EnumerationType); 
		PROCEDURE ^ {OVERRIDE} VisitRangeType*(x: SyntaxTree.RangeType); 
		PROCEDURE ^ {OVERRIDE} VisitArrayType*(x: SyntaxTree.ArrayType); 
		PROCEDURE ^ {OVERRIDE} VisitNilType*(x: SyntaxTree.NilType); 
		PROCEDURE ^ {OVERRIDE} VisitAddressType*(x: SyntaxTree.AddressType); 
		PROCEDURE ^ {OVERRIDE} VisitObjectType*(x: SyntaxTree.ObjectType); 
		PROCEDURE ^ {OVERRIDE} VisitAnyType*(x: SyntaxTree.AnyType); 
		PROCEDURE ^ {OVERRIDE} VisitAnyRecordType*(x: SyntaxTree.AnyRecordType); 
		PROCEDURE ^ {OVERRIDE} VisitMathArrayType*(x: SyntaxTree.MathArrayType); 
		PROCEDURE ^ PointerFlags(x: SyntaxTree.PointerType); 
		PROCEDURE ^ ObjectFlags(rec: SyntaxTree.RecordType; x: SyntaxTree.PointerType); 
		PROCEDURE ^ {OVERRIDE} VisitPointerType*(x: SyntaxTree.PointerType); 
		PROCEDURE ^ {OVERRIDE} VisitPortType*(x: SyntaxTree.PortType); 
		PROCEDURE ^ {OVERRIDE} VisitCellType*(x: SyntaxTree.CellType); 
		PROCEDURE ^ {OVERRIDE} VisitRecordType*(x: SyntaxTree.RecordType); 
		PROCEDURE ^ Flag(identifier: SyntaxTree.Identifier; VAR first: BOOLEAN); 
		PROCEDURE ^ FlagEnd(first: BOOLEAN); 
		PROCEDURE ^ Value(identifier: SyntaxTree.Identifier; value: SIGNED64; VAR first: BOOLEAN); 
		PROCEDURE ^ {OVERRIDE} VisitProcedureType*(x: SyntaxTree.ProcedureType); 
		PROCEDURE ^ ExpressionList(x: SyntaxTree.ExpressionList); 
		PROCEDURE ^ Expression*(x: SyntaxTree.Expression); 
		PROCEDURE ^ {OVERRIDE} VisitExpression*(x: SyntaxTree.Expression); 
		PROCEDURE ^ {OVERRIDE} VisitSet*(x: SyntaxTree.Set); 
		PROCEDURE ^ {OVERRIDE} VisitMathArrayExpression*(x: SyntaxTree.MathArrayExpression); 
		PROCEDURE ^ {OVERRIDE} VisitUnaryExpression*(x: SyntaxTree.UnaryExpression); 
		PROCEDURE ^ {OVERRIDE} VisitBinaryExpression*(x: SyntaxTree.BinaryExpression); 
		PROCEDURE ^ {OVERRIDE} VisitRangeExpression*(x: SyntaxTree.RangeExpression); 
		PROCEDURE ^ {OVERRIDE} VisitConditionalExpression*(x: SyntaxTree.ConditionalExpression); 
		PROCEDURE ^ {OVERRIDE} VisitTensorRangeExpression*(x: SyntaxTree.TensorRangeExpression); 
		PROCEDURE ^ {OVERRIDE} VisitConversion*(x: SyntaxTree.Conversion); 
		PROCEDURE ^ {OVERRIDE} VisitDesignator*(x: SyntaxTree.Designator); 
		PROCEDURE ^ {OVERRIDE} VisitIdentifierDesignator*(x: SyntaxTree.IdentifierDesignator); 
		PROCEDURE ^ {OVERRIDE} VisitSelectorDesignator*(x: SyntaxTree.SelectorDesignator); 
		PROCEDURE ^ {OVERRIDE} VisitBracketDesignator*(x: SyntaxTree.BracketDesignator); 
		PROCEDURE ^ {OVERRIDE} VisitParameterDesignator*(x: SyntaxTree.ParameterDesignator); 
		PROCEDURE ^ {OVERRIDE} VisitIndexDesignator*(x: SyntaxTree.IndexDesignator); 
		PROCEDURE ^ {OVERRIDE} VisitArrowDesignator*(x: SyntaxTree.ArrowDesignator); 
		PROCEDURE ^ ShortType(x: SyntaxTree.Type); 
		PROCEDURE ^ {OVERRIDE} VisitSymbolDesignator*(x: SyntaxTree.SymbolDesignator); 
		PROCEDURE ^ {OVERRIDE} VisitSupercallDesignator*(x: SyntaxTree.SupercallDesignator); 
		PROCEDURE ^ {OVERRIDE} VisitSelfDesignator*(x: SyntaxTree.SelfDesignator); 
		PROCEDURE ^ {OVERRIDE} VisitResultDesignator*(x: SyntaxTree.ResultDesignator); 
		PROCEDURE ^ {OVERRIDE} VisitDereferenceDesignator*(x: SyntaxTree.DereferenceDesignator); 
		PROCEDURE ^ {OVERRIDE} VisitTypeGuardDesignator*(x: SyntaxTree.TypeGuardDesignator); 
		PROCEDURE ^ {OVERRIDE} VisitProcedureCallDesignator*(x: SyntaxTree.ProcedureCallDesignator); 
		PROCEDURE ^ {OVERRIDE} VisitInlineCallDesignator*(x: SyntaxTree.InlineCallDesignator); 
		PROCEDURE ^ {OVERRIDE} VisitBuiltinCallDesignator*(x: SyntaxTree.BuiltinCallDesignator); 
		PROCEDURE ^ {OVERRIDE} VisitValue*(x: SyntaxTree.Value); 
		PROCEDURE ^ {OVERRIDE} VisitBooleanValue*(x: SyntaxTree.BooleanValue); 
		PROCEDURE ^ Hex(x: SIGNED64); 
		PROCEDURE ^ {OVERRIDE} VisitIntegerValue*(x: SyntaxTree.IntegerValue); 
		PROCEDURE ^ {OVERRIDE} VisitCharacterValue*(x: SyntaxTree.CharacterValue); 
		PROCEDURE ^ {OVERRIDE} VisitSetValue*(x: SyntaxTree.SetValue); 
		PROCEDURE ^ {OVERRIDE} VisitMathArrayValue*(x: SyntaxTree.MathArrayValue); 
		PROCEDURE ^ FormatedFloat(value: FLOAT64; subtype: SIGNED32); 
		PROCEDURE ^ {OVERRIDE} VisitRealValue*(x: SyntaxTree.RealValue); 
		PROCEDURE ^ {OVERRIDE} VisitComplexValue*(x: SyntaxTree.ComplexValue); 
		PROCEDURE ^ {OVERRIDE} VisitStringValue*(x: SyntaxTree.StringValue); 
		PROCEDURE ^ {OVERRIDE} VisitNilValue*(x: SyntaxTree.NilValue); 
		PROCEDURE ^ {OVERRIDE} VisitEnumerationValue*(x: SyntaxTree.EnumerationValue); 
		PROCEDURE ^ {OVERRIDE} VisitProcedureValue*(x: SyntaxTree.ProcedureValue); 
		PROCEDURE ^ Symbol*(x: SyntaxTree.Symbol); 
		PROCEDURE ^ {OVERRIDE} VisitSymbol*(x: SyntaxTree.Symbol); 
		PROCEDURE ^ Visible(symbol: SyntaxTree.Symbol): BOOLEAN; 
		PROCEDURE ^ PrintSymbol(x: SyntaxTree.Symbol); 
		PROCEDURE ^ {OVERRIDE} VisitTypeDeclaration*(x: SyntaxTree.TypeDeclaration); 
		PROCEDURE ^ TypeDeclarationList(x: SyntaxTree.TypeDeclaration); 
		PROCEDURE ^ {OVERRIDE} VisitConstant*(x: SyntaxTree.Constant); 
		PROCEDURE ^ ConstantList(x: SyntaxTree.Constant); 
		PROCEDURE ^ {OVERRIDE} VisitVariable*(x: SyntaxTree.Variable); 
		PROCEDURE ^ VariableList(x: SyntaxTree.Variable); 
		PROCEDURE ^ AliasList(x: SyntaxTree.Alias); 
		PROCEDURE ^ {OVERRIDE} VisitParameter*(x: SyntaxTree.Parameter); 
		PROCEDURE ^ ParameterList*(x: SyntaxTree.Parameter); 
		PROCEDURE ^ {OVERRIDE} VisitProcedure*(x: SyntaxTree.Procedure); 
		PROCEDURE ^ {OVERRIDE} VisitOperator*(x: SyntaxTree.Operator); 
		PROCEDURE ^ ProcedureList(list: SyntaxTree.ProcedureList); 
		PROCEDURE ^ {OVERRIDE} VisitImport*(x: SyntaxTree.Import); 
		PROCEDURE ^ ImportList(x: SyntaxTree.Import); 
		PROCEDURE ^ {OVERRIDE} VisitBuiltin*(x: SyntaxTree.Builtin); 
		PROCEDURE ^ BuiltinList(x: SyntaxTree.Builtin); 
		PROCEDURE ^ BeginComment; 
		PROCEDURE ^ EndComment; 
		PROCEDURE ^ Comment(x: SyntaxTree.Comment); 
		PROCEDURE ^ Comments(c: SyntaxTree.Comment; x: ANY ; sameLine: BOOLEAN); 
		PROCEDURE ^ CommentList(x: SyntaxTree.Comment); 
		PROCEDURE ^ Scope*(x: SyntaxTree.Scope); 
		PROCEDURE ^ ProcedureScope(x: SyntaxTree.ProcedureScope); 
		PROCEDURE ^ Statement*(x: SyntaxTree.Statement); 
		PROCEDURE ^ StatementSequence*(x: SyntaxTree.StatementSequence); 
		PROCEDURE ^ {OVERRIDE} VisitStatement*(x: SyntaxTree.Statement); 
		PROCEDURE ^ {OVERRIDE} VisitProcedureCallStatement*(x: SyntaxTree.ProcedureCallStatement); 
		PROCEDURE ^ {OVERRIDE} VisitAssignment*(x: SyntaxTree.Assignment); 
		PROCEDURE ^ {OVERRIDE} VisitDeclarationStatement*(x: SyntaxTree.DeclarationStatement); 
		PROCEDURE ^ {OVERRIDE} VisitCommunicationStatement*(x: SyntaxTree.CommunicationStatement); 
		PROCEDURE ^ IfPart(x: SyntaxTree.IfPart); 
		PROCEDURE ^ {OVERRIDE} VisitIfStatement*(x: SyntaxTree.IfStatement); 
		PROCEDURE ^ WithPart(x: SyntaxTree.WithPart); 
		PROCEDURE ^ {OVERRIDE} VisitWithStatement*(x: SyntaxTree.WithStatement); 
		PROCEDURE ^ CasePart(x: SyntaxTree.CasePart); 
		PROCEDURE ^ {OVERRIDE} VisitCaseStatement*(x: SyntaxTree.CaseStatement); 
		PROCEDURE ^ {OVERRIDE} VisitWhileStatement*(x: SyntaxTree.WhileStatement); 
		PROCEDURE ^ {OVERRIDE} VisitRepeatStatement*(x: SyntaxTree.RepeatStatement); 
		PROCEDURE ^ {OVERRIDE} VisitForStatement*(x: SyntaxTree.ForStatement); 
		PROCEDURE ^ {OVERRIDE} VisitLoopStatement*(x: SyntaxTree.LoopStatement); 
		PROCEDURE ^ {OVERRIDE} VisitExitableBlock*(x: SyntaxTree.ExitableBlock); 
		PROCEDURE ^ {OVERRIDE} VisitExitStatement*(x: SyntaxTree.ExitStatement); 
		PROCEDURE ^ {OVERRIDE} VisitReturnStatement*(x: SyntaxTree.ReturnStatement); 
		PROCEDURE ^ {OVERRIDE} VisitAwaitStatement*(x: SyntaxTree.AwaitStatement); 
		PROCEDURE ^ Modifiers(x: SyntaxTree.Modifier); 
		PROCEDURE ^ {OVERRIDE} VisitStatementBlock*(x: SyntaxTree.StatementBlock); 
		PROCEDURE ^ Code(x: SyntaxTree.Code); 
		PROCEDURE ^ {OVERRIDE} VisitCode*(x: SyntaxTree.Code); 
		PROCEDURE ^ Body(x: SyntaxTree.Body; implementation: BOOLEAN); 
		PROCEDURE ^ {OVERRIDE} VisitModule*(x: SyntaxTree.Module); 
		PROCEDURE ^ TemplateParameter(x: SyntaxTree.TemplateParameter); 
		PROCEDURE ^ Module*(x: SyntaxTree.Module); 
		PROCEDURE ^ SingleStatement*(b: BOOLEAN); 
		PROCEDURE ^  & Init*(w: Streams.Writer; mode: SIGNED32; info: BOOLEAN); 
	END Printer; 
VAR 
	debug: Printer; 

	PROCEDURE ^ IsProperType(type: SyntaxTree.Type): BOOLEAN; 
	PROCEDURE ^ NewPrinter*(w: Streams.Writer; mode: SIGNED32; info: BOOLEAN): Printer; 
	PROCEDURE ^ Info*(CONST info: ARRAY OF CHAR; a: ANY ); 
	PROCEDURE ^ Init; 
BEGIN
END FoxPrintout.
