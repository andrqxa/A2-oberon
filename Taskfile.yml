version: '3'

vars:
  PLATFORMS: Linux32 Linux64 LinuxARM Win32 Win64 #Bios32 Bios64 Zynq Win32 Win64 Linux32 Linux64 LinuxARM Darwin32 Darwin64 Solaris32 Solaris64 Bios32C RPiC ZynqC Win32C Linux32C Linux64C
  CURRENT_DIR:
    sh: pwd
  CONFIGS: "{{.CURRENT_DIR}}/configs"
  SRC: "{{.CURRENT_DIR}}/source"
  DATA: "{{.CURRENT_DIR}}/data"
  BUILD_DIR: "{{.CURRENT_DIR}}/target"
  COMPILERS: "{{.CURRENT_DIR}}/compilers"
  HOST:
    sh: |
      if [[ "$OS" == "Windows_NT" ]]; then
        echo "Win64"
      else
        echo "Linux64"
      fi
  PATHSEP:
    sh: |
      if [[ "{{.HOST}}" == Win* ]]; then
        echo "\\"
      else
        echo "/"
      fi
  RELEASE_TOOL: "{{.DATA}}/Release.Tool"
  DEPENDENCY_WALKER: "{{.SRC}}/DependencyWalker.Mod"
  TOOL:
    sh: |
      if [[ -f "{{.COMPILERS}}/{{.HOST}}/oberon" ]]; then
        echo "{{.COMPILERS}}/{{.HOST}}/oberon"
      else
        echo "{{.COMPILERS}}/{{.HOST}}/oberon.exe"
      fi
  OBERON_MODULES: "{{.CONFIGS}}/oberon_modules.txt"
  PLATFORM_ENV: "{{.CURRENT_DIR}}/.platform_env"

tasks:
  default:
    desc: Build all platforms
    cmds:
      - task: platforms

  set-platform-env:
    desc: Set platform-specific environment
    vars:
      PLATFORM: "{{.PLATFORM}}"
    cmds:
      - |
        echo "Setting env for platform: {{.PLATFORM}}"
        case "{{.PLATFORM}}" in
          Linux64)
            DEFINES=" --define=UNIX,AMD64"
            FILEFORMAT=""
            EXTENSION="GofUu"
            SYMBOLFILEEXCEPTION=".SymUu"
            COMPILEOPTIONS="-p=Unix64"
            FILENAME="oberon"
            DISPLACEMENT=""
            MODULE_LIST="{{.CONFIGS}}/moduleListLinux.txt"
            ;;
          Linux32)
            DEFINES=" --define=UNIX,I386" 
            FILEFORMAT=""
            EXTENSION="GofU"
            SYMBOLFILEEXCEPTION=".SymU"
            COMPILEOPTIONS="-p=Unix32"
            FILENAME="oberon"
            DISPLACEMENT=""
            MODULE_LIST="{{.CONFIGS}}/moduleListLinux.txt"
            ;;
          LinuxARM)
            DEFINES=" --define=UNIX,ARM" 
            FILEFORMAT=""
            EXTENSION="GofA"
            SYMBOLFILEEXCEPTION=".SymA"
            COMPILEOPTIONS="-p=UnixARM"
            FILENAME="oberon"
            DISPLACEMENT=""
            MODULE_LIST="{{.CONFIGS}}/moduleListLinuxARM.txt"
            ;;
          Win64)
            DEFINES=" --define=WINDOWS,AMD64"
            FILEFORMAT="--fileFormat=PE64CUI"
            EXTENSION="GofWw"
            SYMBOLFILEEXCEPTION=".SymWw"
            COMPILEOPTIONS="-p=Win64"
            FILENAME="oberon.exe"
            DISPLACEMENT="--displacement=401000H"
            MODULE_LIST="{{.CONFIGS}}/moduleListWin.txt"
            ;;
          Win32)
            DEFINES=" --define=WINDOWS,I386" 
            FILEFORMAT="--fileFormat=PE32CUI"
            EXTENSION="GofW"
            SYMBOLFILEEXCEPTION=".SymW"
            COMPILEOPTIONS="-p=Win32"
            FILENAME="oberon.exe"
            DISPLACEMENT="--displacement=401000H"
            MODULE_LIST="{{.CONFIGS}}/moduleListWin.txt"
            ;;
          *)
            echo "Unknown platform: {{.PLATFORM}}"
            exit 1
            ;;
        esac

        cat > {{.PLATFORM_ENV}} <<EOF
        export DEFINES="$DEFINES"
        export EXTENSION="$EXTENSION"
        export SYMBOLFILEEXCEPTION="$SYMBOLFILEEXCEPTION"
        export COMPILEOPTIONS="$COMPILEOPTIONS"
        export FILEFORMAT="$FILEFORMAT"
        export FILENAME="$FILENAME"
        export DISPLACEMENT="$DISPLACEMENT"
        export MODULE_LIST="$MODULE_LIST"
        EOF

  prepare-workspace:
    desc: "Preparing workspace"
    vars:
      PLATFORM: "{{.PLATFORM}}"
    cmds:
      - echo "[INFO] Preparing workspace for {{.PLATFORM}}"
      - mkdir -p {{.BUILD_DIR}}/{{.PLATFORM}}/bin
      - mkdir -p {{.BUILD_DIR}}/{{.PLATFORM}}/work
      - cp -r {{.SRC}} {{.BUILD_DIR}}/{{.PLATFORM}}/
      - cp -r {{.DATA}} {{.BUILD_DIR}}/{{.PLATFORM}}/

  generate-module-list:
    desc: Generate raw module list (used internally)
    cmds:
      - mkdir -p {{.BUILD_DIR}}/{{.HOST}}
      - |
          AOSPATH={{.DATA}} {{.TOOL}} Release.Build --list {{.HOST}} \
          | tr -d '\r' \
          | grep "^[^ ]\+\.Mod\s" \
          | tr -d ' ' \
          > {{.BUILD_DIR}}/{{.HOST}}/.modules
    sources:
      - "{{.DATA}}/**/*"
    generates:
      - "{{.BUILD_DIR}}/{{.HOST}}/.modules"

  modules:
    desc: Export modules as environment variable
    deps: [generate-module-list]
    cmds:
      - |
          cat {{.BUILD_DIR}}/{{.HOST}}/.modules \
          | paste -sd' ' - \
          | sed 's/$/ DependencyWalker.Mod/' \
          | sed 's/.*/export MODULES="&"/' \
          > {{.BUILD_DIR}}/{{.HOST}}/.modules_env
          rm "{{.BUILD_DIR}}/{{.HOST}}/.modules"
    sources:
      - "{{.BUILD_DIR}}/{{.HOST}}/.modules"
    generates:
    - "{{.BUILD_DIR}}/{{.HOST}}/.modules_env"

  dependencies:
    desc: Generate modules dependencies
    deps: 
      - task: set-platform-env
        vars: { PLATFORM: "{{.HOST}}" }
      - generate-module-list
    cmds:
      - |
          source {{.PLATFORM_ENV}}
          module_files=""
          while read -r module; do
            module_files="$module_files source/$module"
          done < <(sort -u {{.BUILD_DIR}}/{{.HOST}}/.modules)
          {{.TOOL}} DependencyWalker.Walk $DEFINES --fileExtension=.$EXTENSION $module_files {{.DEPENDENCY_WALKER}} | tr -d '\r' | grep "^.*\\.$EXTENSION:" > {{.BUILD_DIR}}/{{.HOST}}/.dependencies
          echo "FoxArrayBase.$EXTENSION: source/ComplexNumbers.$EXTENSION" >> {{.BUILD_DIR}}/{{.HOST}}/.dependencies
          rm "{{.BUILD_DIR}}/{{.HOST}}/.modules"
    sources:
      - "{{.BUILD_DIR}}/{{.HOST}}/.modules"
    generates:
      - "{{.BUILD_DIR}}/{{.HOST}}/.dependencies"

  compile-module:
    desc: Compile a single module (internal task)
    vars:
      MODULE: '{{.MODULE}}'    
    deps: 
      - task: set-platform-env
        vars: { PLATFORM: "{{.HOST}}" }
    cmds:
      - |
          source .platform_env
          {{.TOOL}} Compiler.Compile $COMPILEOPTIONS --destPath="{{.BUILD_DIR}}/{{.HOST}}/bin/" --objectFileExtension=$EXTENSION --symbolFileExtension=$SYMBOLFILEEXCEPTION {{.SRC}}/{{.MODULE}}
    sources:
      - 'source/{{.MODULE}}.Mod'
    generates:
      - '{{.MODULE}}.$EXTENSION'

  compile-all-modules:
    desc: Compile all modules using compile-module
    deps: 
      - modules
      - task: set-platform-env
        vars: { PLATFORM: "{{.HOST}}" }
      - task: prepare-workspace
        vars:
          PLATFORM: "{{.HOST}}"
    cmds:
      - |
          source {{.PLATFORM_ENV}}
          source {{.BUILD_DIR}}/{{.HOST}}/.modules_env
          for mod in $MODULES; do
            {{.TOOL}} Compiler.Compile $COMPILEOPTIONS --destPath="{{.BUILD_DIR}}/{{.HOST}}/bin/" --objectFileExtension=$EXTENSION --symbolFileExtension=$SYMBOLFILEEXCEPTION "{{.BUILD_DIR}}/{{.HOST}}/source"/$mod || exit 1
          done

  oberon:
    desc: Build a specific compiler for host
    vars: { PLATFORM: "{{.HOST}}" }
    cmds:
      - task: compile-all-modules
      - task: configure-platform
        vars:
          PLATFORM: "{{.PLATFORM}}"
      - |
        source {{.PLATFORM_ENV}}
        cat {{.OBERON_MODULES}} >> "{{.BUILD_DIR}}/{{.PLATFORM}}/combined.txt"
        echo "~" >> "{{.BUILD_DIR}}/{{.PLATFORM}}/combined.txt"
      - task: create-compile-ini
        vars:
          PLATFORM: "{{.PLATFORM}}"
      - task: compile-platform
        vars:
          PLATFORM: "{{.PLATFORM}}"
      - |
          echo "[INFO] Replacing old compiler binary"
          source {{.PLATFORM_ENV}}          
          cp {{.BUILD_DIR}}/{{.HOST}}/$FILENAME {{.COMPILERS}}/{{.HOST}}/$FILENAME.new
          mv {{.COMPILERS}}/{{.HOST}}/$FILENAME.new {{.COMPILERS}}/{{.HOST}}/$FILENAME
          chmod +x {{.COMPILERS}}/{{.HOST}}/$FILENAME
      # - task: update-module-list
      #   vars:
      #     PLATFORM: "{{.PLATFORM}}"
      - task: clean-temporary-files
        vars:
          PLATFORM: "{{.PLATFORM}}"
      - task: clean
      - echo "[SUCCESS] Compiler rebuilt and replaced for {{.PLATFORM}}"

  platforms:
    desc: Build all supported platforms
    cmds:
      - for: { var: PLATFORMS, split: ' ' }
        task: build-platform
        vars:
          PLATFORM: "{{.ITEM}}"

  build-platform:
    desc: Build a specific platform
    vars:
      PLATFORM: "{{.PLATFORM}}"
    cmds:
      - task: prepare-workspace
        vars:
          PLATFORM: "{{.PLATFORM}}"
      - task: configure-platform
        vars:
          PLATFORM: "{{.PLATFORM}}"
      - task: add-module-list
        vars:
          PLATFORM: "{{.PLATFORM}}"
      - task: create-compile-ini
        vars:
          PLATFORM: "{{.PLATFORM}}"
      - task: compile-platform
        vars:
          PLATFORM: "{{.PLATFORM}}"
      # - task: update-module-list
      #   vars:
      #     PLATFORM: "{{.PLATFORM}}"
      - task: create-runtime-files
        vars:
          PLATFORM: "{{.PLATFORM}}"
      - task: clean-temporary-files
        vars:
          PLATFORM: "{{.PLATFORM}}"
      - echo "Building platform {{.PLATFORM}} have finished"

  configure-platform:
    desc: Configure platform-specific settings
    vars:
      PLATFORM: "{{.PLATFORM}}"
    deps:
      - task: set-platform-env
        vars: { PLATFORM: "{{.PLATFORM}}" }
    cmds:
      - |
        source {{.PLATFORM_ENV}}
        echo "Using module list: $MODULE_LIST"
        echo "Release.Build --build --path=bin/ {{.PLATFORM}} ~" > "{{.BUILD_DIR}}/{{.PLATFORM}}/combined.txt"
        echo "Linker.Link -p={{.PLATFORM}} --path=bin/ $FILEFORMAT --fileName=$FILENAME --extension=$EXTENSION $DISPLACEMENT" >> "{{.BUILD_DIR}}/{{.PLATFORM}}/combined.txt"

  add-module-list:
    desc: Added list of modules to Linker
    vars:
      PLATFORM: "{{.PLATFORM}}"
    deps:
      - task: set-platform-env
        vars: { PLATFORM: "{{.PLATFORM}}" }
    cmds:
      - |
        source {{.PLATFORM_ENV}}
        cat "$MODULE_LIST" >> "{{.BUILD_DIR}}/{{.PLATFORM}}/combined.txt"
        echo "~" >> "{{.BUILD_DIR}}/{{.PLATFORM}}/combined.txt"

  create-compile-ini:
    desc: Create oberonCompile.ini file
    vars:
      PLATFORM: "{{.PLATFORM}}"
    cmds:
      - |
        cat > {{.BUILD_DIR}}/{{.PLATFORM}}/oberonCompile.ini << EOF
        Heaps.SetMetaData~
        Files.AddSearchPath {{.BUILD_DIR}}/{{.PLATFORM}}/bin~
        Files.AddSearchPath data~
        Files.AddSearchPath source~
        Configuration.Init~
        EOF

  compile-platform:
    desc: Compile the platform
    vars:
      PLATFORM: "{{.PLATFORM}}"
    cmds:
      - |
        cd {{.BUILD_DIR}}/{{.PLATFORM}} && {{.TOOL}} do "
          System.DoFile oberonCompile.ini ~
          Files.SetWorkPath {{.BUILD_DIR}}/{{.PLATFORM}} ~
          System.DoFile {{.BUILD_DIR}}/{{.PLATFORM}}/combined.txt ~
        "
      - |
        case "{{.PLATFORM}}" in
          Linux*|LinuxARM)
            chmod +x {{.BUILD_DIR}}/{{.PLATFORM}}/oberon
            ;;
          Win*)
            chmod +x {{.BUILD_DIR}}/{{.PLATFORM}}/oberon.exe
            ;;
        esac

  create-runtime-files:
    desc: Create runtime configuration files
    vars:
      PLATFORM: "{{.PLATFORM}}"
    cmds:
      - task: create-a2-txt
        vars:
          PLATFORM: "{{.PLATFORM}}"
      - task: create-oberon-ini
        vars:
          PLATFORM: "{{.PLATFORM}}"
      - task: create-platform-specific-files
        vars:
          PLATFORM: "{{.PLATFORM}}"

  create-a2-txt:
    desc: Create a2.txt file
    vars:
      PLATFORM: "{{.PLATFORM}}"
    cmds:
      - |
        cat > {{.BUILD_DIR}}/{{.PLATFORM}}/a2.txt << EOF
        System.DoFile oberon.ini~
        Display.Install~
        WindowManager.Install~
        Clipboard.Install~
        Autostart.Run~
        EOF

  create-oberon-ini:
    desc: Create oberon.ini file
    vars:
      PLATFORM: "{{.PLATFORM}}"
    cmds:
      - |
        cat > {{.BUILD_DIR}}/{{.PLATFORM}}/oberon.ini << EOF
        Heaps.SetMetaData~
        Files.AddSearchPath bin~
        Files.AddSearchPath source~
        Files.AddSearchPath data~
        Files.AddSearchPath work~
        Files.SetWorkPath work~
        Configuration.Init~
        FSTools.Mount WORK RelativeFileSystem .~
        EOF

  create-platform-specific-files:
    desc: Create platform-specific startup files
    vars:
      PLATFORM: "{{.PLATFORM}}"
    cmds:
      - |
        case "{{.PLATFORM}}" in
          Linux64|Linux32|LinuxARM)
            echo './oberon run a2.txt' > {{.BUILD_DIR}}/{{.PLATFORM}}/a2.sh
            chmod +x {{.BUILD_DIR}}/{{.PLATFORM}}/a2.sh
            echo 'KbdMouse.DisableMouseEmulation~' >> {{.BUILD_DIR}}/{{.PLATFORM}}/a2.txt
            echo 'DisplayRefresher.Install~' >> {{.BUILD_DIR}}/{{.PLATFORM}}/a2.txt
            ;;
          Win32|Win64)
            echo '@echo off' > {{.BUILD_DIR}}/{{.PLATFORM}}/a2.bat
            echo 'oberon.exe run a2.txt' >> {{.BUILD_DIR}}/{{.PLATFORM}}/a2.bat
            echo 'Machine.SetTraceFile~' >> {{.BUILD_DIR}}/{{.PLATFORM}}/oberon.ini
            echo 'Traps.Install~' >> {{.BUILD_DIR}}/{{.PLATFORM}}/oberon.ini
            ;;
        esac

  update-module-list:
    desc: Update module list file from oberon.log
    vars:
      PLATFORM: "{{.PLATFORM}}"
    cmds:
      - |
        case "{{.PLATFORM}}" in
          Linux64|Linux32)
            OUT="{{.CONFIGS}}/moduleListLinux.txt"
            ;;
          LinuxARM)
            OUT="{{.CONFIGS}}/moduleListLinuxARM.txt"
            ;;
          Win64|Win32)
            OUT="{{.CONFIGS}}/moduleListWin.txt"
            ;;
          *)
            echo "Unknown platform: {{.PLATFORM}}"; exit 1
            ;;
        esac
        grep ":processing\s*$" {{.BUILD_DIR}}/{{.PLATFORM}}/oberon.log | grep -o "^[^:]*" | sed 's/\.[^.]*$$//' | uniq > "$OUT"
        echo "Module list updated: $OUT"

  clean-temporary-files:
    desc: CLean up the temporary files that was created in time of compiling platform
    vars:
      PLATFORM: "{{.PLATFORM | default .HOST}}"
    cmds:
      - |
        rm -f {{.BUILD_DIR}}/{{.PLATFORM}}/oberon.log
        rm -f {{.BUILD_DIR}}/{{.PLATFORM}}/oberonCompile.ini
        rm -f {{.BUILD_DIR}}/{{.PLATFORM}}/combined.txt
        rm -f {{.PLATFORM_ENV}}


  # Individual platform build tasks
  Linux32:
    desc: Build Linux32 platform
    cmds:
      - task: build-platform
        vars:
          PLATFORM: Linux32

  Linux64:
    desc: Build Linux64 platform
    cmds:
      - task: build-platform
        vars:
          PLATFORM: Linux64

  LinuxARM:
    desc: Build LinuxARM platform
    cmds:
      - task: build-platform
        vars:
          PLATFORM: LinuxARM

  Win32:
    desc: Build Win32 platform
    cmds:
      - task: build-platform
        vars:
          PLATFORM: Win32

  Win64:
    desc: Build Win64 platform
    cmds:
      - task: build-platform
        vars:
          PLATFORM: Win64

  test:
    desc: Run compiler tests for host platform
    cmds:
      - echo "Running tests for host {{.HOST}}"
      - |
        cd {{.BUILD_DIR}}/{{.HOST}} && {{.TOOL}} do "
          System.DoFile oberon.ini ~
          FoxTest.Compile --verbose -l=TestCompilation.Log Oberon.Compilation.Test Oberon.Compilation.AMD64TestDiff ~
          FoxTest.Compile --verbose -l=TestExecution.Log Oberon.Execution.Test Oberon.Execution.AMD64TestDiff ~
        "
      - rm -f {{.BUILD_DIR}}/{{.HOST}}/work/*.SymUu
      - rm -f {{.BUILD_DIR}}/{{.HOST}}/work/*.GofUu
      - rm -f {{.BUILD_DIR}}/{{.HOST}}/work/*.txt

  clean:
    desc: Remove all build artifacts
    cmds:
      - rm -rf {{.BUILD_DIR}}
      - echo "Cleaned build artifacts"

  help:
    desc: Display help message
    cmds:
      - 'echo "task <platform>       — build a single platform from the list: [{{.PLATFORMS}}]"'
      - echo "task platforms        — build all platforms"
      - echo "task test             — run compiler tests"
      - echo "task clean            — remove all build artifacts"
      - echo "task help             — display this help message"
      - echo "task --list           — list all available tasks"