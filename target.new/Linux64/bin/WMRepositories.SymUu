MODULE WMRepositories;
	IMPORT Modules, Kernel, KernelLog, Commands, Strings, XML, XMLObjects, Repositories, Texts, Raster, WMRectangles, WMMessages, WMRestorable, WMGraphics, WMWindowManager, WMProperties, WMComponents, WMStandardComponents, WMEditors, WMGrids, WMStringGrids, WMDialogs, WMDropTarget;
CONST 
	WindowWidth = 640; 
	WindowHeight = 480; 
	State_NotInitialized = 0; 
	State_Running = 1; 
	State_Finalizing = 9; 
	State_Finalized = 10; 
TYPE 
	AddComponentProcedure* = PROCEDURE {DELEGATE}(component: Repositories.Component; VAR res: INTEGER); 

	DropTarget* = OBJECT (WMDropTarget.DropTarget)
	VAR 
		originator: ANY ; 
		addComponent: AddComponentProcedure; 

		PROCEDURE ^  & Init*(originator: ANY ; addComponent: AddComponentProcedure); 
		PROCEDURE ^ {OVERRIDE} GetInterface*(type: SIGNED32): WMDropTarget.DropInterface; 
	END DropTarget; 

	DropComponent* = OBJECT (WMDropTarget.DropInterface)
	VAR 
		originator: ANY ; 
		addComponent: AddComponentProcedure; 

		PROCEDURE ^  & Init*(originator: ANY ; addComponent: AddComponentProcedure); 
		PROCEDURE ^ Set(component: Repositories.Component; VAR res: INTEGER); 
	END DropComponent; 

	RepositoriesView* = OBJECT {EXCLUSIVE} (WMComponents.VisualComponent)
	VAR 
		grid-: WMStringGrids.StringGrid; 
		repositories: Repositories.Repositories; 
		lastTimestamp: SIGNED32; 
		state: SIGNED32; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ {OVERRIDE} Initialize*; 
		PROCEDURE ^ SelectByRepository*(repository: Repositories.Repository); 
		PROCEDURE ^ InitGrid; 
		PROCEDURE ^ UpdateGrid; 
		PROCEDURE ^ {OVERRIDE} Finalize*; 
	BEGIN{ACTIVE} 
	END RepositoriesView; 

	EntryWrapper* = OBJECT 
	VAR 
		repository-: Repositories.Repository; 
		element-: XML.Element; 

		PROCEDURE ^  & Init*(repository: Repositories.Repository; CONST element: XML.Element); 
	END EntryWrapper; 

	RepositoryView* = OBJECT {EXCLUSIVE} (WMComponents.VisualComponent)
	VAR 
		showDetails-: WMProperties.BooleanProperty; 
		showDetailsI: BOOLEAN; 
		grid-: WMStringGrids.StringGrid; 
		spacings: WMGrids.Spacings; 
		thisRepository: Repositories.Repository; 
		enum: XMLObjects.Enumerator; 
		draggedComponent: Repositories.Component; 
		lastTimestamp, lastRepositoryTimestamp: SIGNED32; 
		state: SIGNED32; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ {OVERRIDE} PropertyChanged*(sender, property: ANY ); 
		PROCEDURE ^ {OVERRIDE} Initialize*; 
		PROCEDURE ^ InitGrid; 
		PROCEDURE ^ GetSelectedComponent(): Repositories.Component; 
		PROCEDURE ^ MyStartDrag(sender, data: ANY ); 
		PROCEDURE ^ DragWasAccepted(sender, data: ANY ); 
		PROCEDURE ^ SetDetails(details: BOOLEAN); 
		PROCEDURE ^ {OVERRIDE} Resized*; 
		PROCEDURE ^ UpdateGridSpacings*; 
		PROCEDURE ^ SetThisRepository*(repository: Repositories.Repository); 
		PROCEDURE ^ UpdateGrid; 
		PROCEDURE ^ {OVERRIDE} Finalize*; 
	BEGIN{ACTIVE} 
	END RepositoryView; 

	KillerMsg = OBJECT 
	END KillerMsg; 

	Window = OBJECT {EXCLUSIVE} (WMComponents.FormWindow)
	VAR 
		repositories: RepositoriesView; 
		repository: RepositoryView; 
		loadBtn, storeBtn, unloadBtn: WMStandardComponents.Button; 
		filenameEditor: WMEditors.Editor; 
		statusLabel: WMStandardComponents.Label; 
		opNum: SIGNED32; 

		PROCEDURE ^  & New(context: WMRestorable.Context); 
		PROCEDURE ^ CreateForm(): WMComponents.VisualComponent; 
		PROCEDURE ^ SetStatusLabel(CONST m1, m2, m3: ARRAY OF CHAR); 
		PROCEDURE ^ LoadRepository(CONST filename: ARRAY OF CHAR); 
		PROCEDURE ^ HandleButtons(sender, data: ANY ); 
		PROCEDURE ^ OnRepositoriesClicked(sender, data: ANY ); 
		PROCEDURE ^ OnComponentClicked(sender, data: ANY ); 
		PROCEDURE ^ {OVERRIDE} Handle*(VAR x: WMMessages.Message); 
		PROCEDURE ^ {OVERRIDE} Close*; 
	END Window; 
VAR 
	nofWindows: SIGNED32; 
	StrID, StrName, StrType, StrParameter, StrInstance: Strings.String; 
	StrYes, StrNo: Strings.String; 

	PROCEDURE ^ Open*; 
	PROCEDURE ^ Restore*(context: WMRestorable.Context); 
	PROCEDURE ^ InitStrings; 
	PROCEDURE ^ IncCount; 
	PROCEDURE ^ DecCount; 
	PROCEDURE ^ Cleanup; 
BEGIN
END WMRepositories.
