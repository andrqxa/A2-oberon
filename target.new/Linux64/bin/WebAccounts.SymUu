MODULE WebAccounts;
	IMPORT WebComplex, WebStd, DynamicWebpage, PrevalenceSystem, HTTPSupport, HTTPSession, XML, XMLObjects, Dates, Strings, DynamicStrings, TFClasses, Configuration, KernelLog;
CONST 
	WebAccountsContainerName* = \"SystemWebAccounts"\; 
	WebAuthDomainContainerName* = \"SystemAuthorizationDomains"\; 
	WebAccountsSessionVarUsername* = \"dxp-WebAccounts-SessionVar-Username"\; 
	WebAccountsSessionVarPassword* = \"dxp-WebAccounts-SessionVar-Password"\; 
	MinPasswordLength* = 6; 
	WebAccountsPrevSysName* = \"WebAccounts"\; 
	SnapShotFileName = \"WebAccountsSnapShot.XML"\; 
	LogFileName = \"WebAccountsLog.XML"\; 
	ConfigurationSubSectionName = \"Administrators"\; 
	ConfigurationSubSubSectionName = \"AdminInfo"\; 
	WebAccountDatagridName = \"WebAccountDatagrid"\; 
	AuthDomainDatagridName = \"AuthorizationDomainDatagrid"\; 
	ThisModuleNameStr = \"WebAccounts"\; 
	DefaultNewAccountSubmitLabel = \"Submit"\; 
	YesLabel = \"Yes"\; 
	NoLabel = \"No"\; 
	EditLabel = \"Edit"\; 
	DeleteLabel = \"Delete"\; 
	UsernameLabel = \"Username: "\; 
	UsernameHeaderLabel = \"Username"\; 
	PasswordLabel = \"Password: "\; 
	ConfirmPasswordLabel = \"Confirm password: "\; 
	EmailLabel = \"Email: "\; 
	EmailHeaderLabel = \"Email"\; 
	DefaultMessageNameLabel = \"Default message name: "\; 
	LastLoginLabel = \"Last Login: "\; 
	NeverLabel = \"never"\; 
	InterestedDataContainersLabel = \"Interested data containers: "\; 
	NotAuthorizedLabel = \"Not authorized"\; 
	NameLabel = \"Name: "\; 
	NameHeaderLabel = \"Name"\; 
	BackLabel = \"Back"\; 
	SaveLabel = \"Save"\; 
	AdminAccessDeniedLabel = \"Access denied since not authorized as an administrator"\; 
	NameAlreadyUsedLabel = \"name is already used"\; 
	NameIsMissingLabel = \"name is missing"\; 
	LoginLabel = \"Login"\; 
	SelectWebAccountLabel = \"Select web account: "\; 
	UsernameIsMissingLabel = \"Username is missing"\; 
	UsernameIsAlreayUsedLabel = \"Username is already used by someone else"\; 
	PasswordTooShortLabel = \"password too short or empty"\; 
	PasswordDoNotAgreeLabel = \"password and its confirmation did not agree"\; 
	WebAccountIsNotPresentLabel = \"the selected web account is not present"\; 
	NoWebAccountSelectedLabel = \"no web account has been selected"\; 
	ActivatedLabel = \"Activated: "\; 
	IsActivatedLabel = \"Activated"\; 
	NotActivatedLabel = \"Not activated"\; 
	ActivatedHeaderLabel = \"Activated"\; 
	WebAccountsContainerPrefixName = \"dxp-WebAccounts-Container"\; 
TYPE 
	WebAccount* = OBJECT {EXCLUSIVE} (WebComplex.WebForumEntry)
	VAR 
		username: Strings.String; 
		password: Strings.String; 
		email: Strings.String; 
		defaultMsgName: Strings.String; 
		lastLoginTime: WebStd.PtrDateTime; 
		actLoginTime: WebStd.PtrDateTime; 
		interestedContainers: TFClasses.List; 
		isActivated: BOOLEAN; 

		PROCEDURE ^ SetLoginTimeNow*; 
		PROCEDURE ^ GetUsername*(): Strings.String; 
		PROCEDURE ^ SetUsername*(uname: ARRAY OF CHAR); 
		PROCEDURE ^ AgreesWithPassword*(pwd: ARRAY OF CHAR): BOOLEAN; 
		PROCEDURE ^ SetNewPassword*(oldPwd, newPwd: ARRAY OF CHAR): BOOLEAN; 
		PROCEDURE ^ GetEmail*(): Strings.String; 
		PROCEDURE ^ SetEmail*(mail: ARRAY OF CHAR): Strings.String; 
		PROCEDURE ^ GetDefaultMsgName*(): Strings.String; 
		PROCEDURE ^ SetDefaultMsgName*(msgName: ARRAY OF CHAR); 
		PROCEDURE ^ GetLastLoginTime*(): WebStd.PtrDateTime; 
		PROCEDURE ^ IsInterestedOnContainer*(containerName: ARRAY OF CHAR): BOOLEAN; 
		PROCEDURE ^ AddInterestedContainer*(containerName: ARRAY OF CHAR); 
		PROCEDURE ^ RemoveInterestedContainer*(containerName: ARRAY OF CHAR); 
		PROCEDURE ^ IsActivated*(): BOOLEAN; 
		PROCEDURE ^ SetActivated*(modus: BOOLEAN); 
		PROCEDURE ^ {OVERRIDE} Internalize*(input: XML.Content); 
		PROCEDURE ^ {OVERRIDE} Externalize*(): XML.Content; 
		PROCEDURE ^ {OVERRIDE} TableView*(forum: WebComplex.WebForum; request: HTTPSupport.HTTPRequest): WebComplex.TableRow; 
		PROCEDURE ^ {OVERRIDE} DetailView*(forum: WebComplex.WebForum; request: HTTPSupport.HTTPRequest): XML.Content; 
		PROCEDURE ^ {OVERRIDE} EditView*(forum: WebComplex.WebForum; request: HTTPSupport.HTTPRequest): XML.Content; 
	END WebAccount; 

	WebAccountView* = OBJECT (DynamicWebpage.StateFullActiveElement)
	VAR 
		editMode: BOOLEAN; 
		webAccount: WebAccount; 
		objectId: Strings.String; 
		statusContent: XML.Content; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ {OVERRIDE} Transform*(input: XML.Element; request: HTTPSupport.HTTPRequest): XML.Content; 
		PROCEDURE ^ EditView(input: XML.Element; request: HTTPSupport.HTTPRequest): XML.Content; 
		PROCEDURE ^ DetailView(input: XML.Element; request: HTTPSupport.HTTPRequest): XML.Content; 
		PROCEDURE ^ AddStatusMessage(container: XML.Container); 
		PROCEDURE ^ GetInputBackButton(request: HTTPSupport.HTTPRequest): XML.Element; 
		PROCEDURE ^ GetSubmitButton(request: HTTPSupport.HTTPRequest): XML.Element; 
		PROCEDURE ^ SetEditView(request: HTTPSupport.HTTPRequest; params: DynamicWebpage.ParameterList); 
		PROCEDURE ^ UpdateEditEntry(request: HTTPSupport.HTTPRequest; params: DynamicWebpage.ParameterList); 
		PROCEDURE ^ {OVERRIDE} GetEventHandlers*(): DynamicWebpage.EventHandlerList; 
	END WebAccountView; 

	WebAccountDatagrid* = OBJECT (WebComplex.WebForum)
	VAR 
		searchText: Strings.String; 
		accountContainerName: Strings.String; 

		PROCEDURE ^ {OVERRIDE} PreTransform*(input: XML.Element; request: HTTPSupport.HTTPRequest): XML.Content; 
		PROCEDURE ^ {OVERRIDE} InsertObject*(container: WebStd.PersistentDataContainer; superEntry: WebComplex.WebForumEntry; request: HTTPSupport.HTTPRequest; params: DynamicWebpage.ParameterList; VAR statusMsg: XML.Content): BOOLEAN; 
		PROCEDURE ^ {OVERRIDE} UpdateObject*(obj: WebComplex.WebForumEntry; request: HTTPSupport.HTTPRequest; params: DynamicWebpage.ParameterList; VAR statusMsg: XML.Content): BOOLEAN; 
		PROCEDURE ^ {OVERRIDE} OnDelete*(obj: WebComplex.WebForumEntry; request: HTTPSupport.HTTPRequest); 
		PROCEDURE ^ {OVERRIDE} ThisObjectName*(): Strings.String; 
		PROCEDURE ^ {OVERRIDE} ThisModuleName*(): Strings.String; 
		PROCEDURE ^ {OVERRIDE} GetInsertView*(superEntry: WebComplex.WebForumEntry; request: HTTPSupport.HTTPRequest): XML.Content; 
		PROCEDURE ^ {OVERRIDE} GetTableHeader*(request: HTTPSupport.HTTPRequest): WebComplex.HeaderRow; 
		PROCEDURE ^ {OVERRIDE} GetSearchFilter*(text: Strings.String): WebStd.PersistentDataFilter; 
		PROCEDURE ^ SearchFilter(obj: WebStd.PersistentDataObject): BOOLEAN; 
		PROCEDURE ^ {OVERRIDE} GetDefaultOrdering*(): WebStd.PersistentDataCompare; 
		PROCEDURE ^ CompareUsername(obj1, obj2: WebStd.PersistentDataObject): BOOLEAN; 
		PROCEDURE ^ CompareEmail(obj1, obj2: WebStd.PersistentDataObject): BOOLEAN; 
		PROCEDURE ^ CompareActivated(obj1, obj2: WebStd.PersistentDataObject): BOOLEAN; 
	END WebAccountDatagrid; 

	AuthorizationDomain* = OBJECT {EXCLUSIVE} (WebComplex.WebForumEntry)
	VAR 
		name: Strings.String; 
		members: WebStd.PersistentDataContainer; 
		membersDgId: Strings.String; 

		PROCEDURE ^  & Initialize*; 
		PROCEDURE ^ {OVERRIDE} GetReferrencedObjects*(): PrevalenceSystem.PersistentObjectList; 
		PROCEDURE ^ GetName*(): Strings.String; 
		PROCEDURE ^ IsMember*(account: WebAccount): BOOLEAN; 
		PROCEDURE ^ {OVERRIDE} Internalize*(input: XML.Content); 
		PROCEDURE ^ {OVERRIDE} Externalize*(): XML.Content; 
		PROCEDURE ^ {OVERRIDE} TableView*(forum: WebComplex.WebForum; request: HTTPSupport.HTTPRequest): WebComplex.TableRow; 
		PROCEDURE ^ {OVERRIDE} DetailView*(forum: WebComplex.WebForum; request: HTTPSupport.HTTPRequest): XML.Content; 
		PROCEDURE ^ {OVERRIDE} EditView*(forum: WebComplex.WebForum; request: HTTPSupport.HTTPRequest): XML.Content; 
	END AuthorizationDomain; 

	AuthorizationDomainDatagrid* = OBJECT (WebComplex.WebForum)
	VAR 
		searchText: Strings.String; 
		reInitializeSubContainer: BOOLEAN; 

		PROCEDURE ^ {OVERRIDE} PreTransform*(input: XML.Element; request: HTTPSupport.HTTPRequest): XML.Content; 
		PROCEDURE ^ {OVERRIDE} InsertObject*(container: WebStd.PersistentDataContainer; superEntry: WebComplex.WebForumEntry; request: HTTPSupport.HTTPRequest; params: DynamicWebpage.ParameterList; VAR statusMsg: XML.Content): BOOLEAN; 
		PROCEDURE ^ {OVERRIDE} UpdateObject*(obj: WebComplex.WebForumEntry; request: HTTPSupport.HTTPRequest; params: DynamicWebpage.ParameterList; VAR statusMsg: XML.Content): BOOLEAN; 
		PROCEDURE ^ {OVERRIDE} ThisObjectName*(): Strings.String; 
		PROCEDURE ^ {OVERRIDE} ThisModuleName*(): Strings.String; 
		PROCEDURE ^ {OVERRIDE} GetInsertView*(superEntry: WebComplex.WebForumEntry; request: HTTPSupport.HTTPRequest): XML.Content; 
		PROCEDURE ^ {OVERRIDE} GetTableHeader*(request: HTTPSupport.HTTPRequest): WebComplex.HeaderRow; 
		PROCEDURE ^ {OVERRIDE} OnDetailViewActivated*(entryOid: SIGNED32; request: HTTPSupport.HTTPRequest); 
		PROCEDURE ^ {OVERRIDE} GetSearchFilter*(text: Strings.String): WebStd.PersistentDataFilter; 
		PROCEDURE ^ SearchFilter(obj: WebStd.PersistentDataObject): BOOLEAN; 
		PROCEDURE ^ CompareName(obj1, obj2: WebStd.PersistentDataObject): BOOLEAN; 
	END AuthorizationDomainDatagrid; 

	AuthenticationForm* = OBJECT (DynamicWebpage.StateLessActiveElement)

		PROCEDURE ^ {OVERRIDE} Transform*(input: XML.Element; request: HTTPSupport.HTTPRequest): XML.Content; 
		PROCEDURE ^ Check(request: HTTPSupport.HTTPRequest; params: DynamicWebpage.ParameterList); 
		PROCEDURE ^ HasLoginFailed(request: HTTPSupport.HTTPRequest): BOOLEAN; 
		PROCEDURE ^ {OVERRIDE} GetEventHandlers*(): DynamicWebpage.EventHandlerList; 
	END AuthenticationForm; 

	AuthorizationCheck* = OBJECT (DynamicWebpage.StateLessActiveElement)

		PROCEDURE ^ {OVERRIDE} Transform*(input: XML.Element; request: HTTPSupport.HTTPRequest): XML.Content; 
	END AuthorizationCheck; 

	AuthorizationAsAdminCheck* = OBJECT (DynamicWebpage.StateLessActiveElement)

		PROCEDURE ^ {OVERRIDE} Transform*(input: XML.Element; request: HTTPSupport.HTTPRequest): XML.Content; 
	END AuthorizationAsAdminCheck; 

	GetUserName* = OBJECT (DynamicWebpage.StateLessActiveElement)

		PROCEDURE ^ {OVERRIDE} Transform*(input: XML.Element; request: HTTPSupport.HTTPRequest): XML.Content; 
	END GetUserName; 

	DisplayNewInterestedEntries* = OBJECT (DynamicWebpage.StateFullActiveElement)
	VAR 
		trackerOidPrefix: Strings.String; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ GetNewEntriesForContainer(containerName: ARRAY OF CHAR): XML.Container; 
		PROCEDURE ^ {OVERRIDE} Transform*(input: XML.Element; request: HTTPSupport.HTTPRequest): XML.Content; 
	END DisplayNewInterestedEntries; 

	IsAdministrator* = OBJECT (DynamicWebpage.StateLessActiveElement)

		PROCEDURE ^ {OVERRIDE} Transform*(input: XML.Element; request: HTTPSupport.HTTPRequest): XML.Content; 
	END IsAdministrator; 

	IsAuthorized* = OBJECT (DynamicWebpage.StateLessActiveElement)

		PROCEDURE ^ {OVERRIDE} Transform*(input: XML.Element; request: HTTPSupport.HTTPRequest): XML.Content; 
	END IsAuthorized; 

	NewUserFormular* = OBJECT (DynamicWebpage.StateFullActiveElement)
	VAR 
		statusMsg: XML.Content; 
		isRegistered: BOOLEAN; 
		ifSuccessFull: XML.Element; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ {OVERRIDE} PreTransform*(elem: XML.Element; request: HTTPSupport.HTTPRequest): XML.Content; 
		PROCEDURE ^ {OVERRIDE} Transform*(elem: XML.Element; request: HTTPSupport.HTTPRequest): XML.Content; 
		PROCEDURE ^ InsertNewAccount(request: HTTPSupport.HTTPRequest; params: DynamicWebpage.ParameterList); 
		PROCEDURE ^ {OVERRIDE} GetEventHandlers*(): DynamicWebpage.EventHandlerList; 
	END NewUserFormular; 

	AdministratorInfo = OBJECT 
	VAR 
		name, password: Strings.String; 

		PROCEDURE ^  & Init*(adminName, adminPwd: ARRAY OF CHAR); 
	END AdministratorInfo; 
VAR 
	webAccountDesc: PrevalenceSystem.PersistentObjectDescriptor; 
	authorizationDomainDesc: PrevalenceSystem.PersistentObjectDescriptor; 
	administrators: TFClasses.List; 
	prevSys: PrevalenceSystem.PrevalenceSystem; 

	PROCEDURE ^ GetPrevalenceSystem*(): PrevalenceSystem.PrevalenceSystem; 
	PROCEDURE ^ IsSessionAuthorizedAsAdmin*(session: HTTPSession.Session): BOOLEAN; 
	PROCEDURE ^ IsAuthorizedAsAdmin*(username, password: ARRAY OF CHAR): BOOLEAN; 
	PROCEDURE ^ GetAuthWebAccountForSession*(session: HTTPSession.Session): WebAccount; 
	PROCEDURE ^ GetAuthorizedWebAccount*(username, password: ARRAY OF CHAR): WebAccount; 
	PROCEDURE ^ GetWebAccount*(username: ARRAY OF CHAR): WebAccount; 
	PROCEDURE ^ GetAuthorizationDomain*(name: ARRAY OF CHAR): AuthorizationDomain; 
	PROCEDURE ^ Login(username, password: ARRAY OF CHAR; request: HTTPSupport.HTTPRequest); 
	PROCEDURE ^ GetWebAccountInsertView(accountContainerName: Strings.String; superEntry: WebComplex.WebForumEntry; allowActivation: BOOLEAN; request: HTTPSupport.HTTPRequest): XML.Content; 
	PROCEDURE ^ InsertWebAccountObject(accountContainerName: Strings.String; container: WebStd.PersistentDataContainer; superEntry: WebComplex.WebForumEntry; activated: BOOLEAN; request: HTTPSupport.HTTPRequest; params: DynamicWebpage.ParameterList; VAR statusMsg: XML.Content): BOOLEAN; 
	PROCEDURE ^ UpdateWebAccountObject(obj: WebComplex.WebForumEntry; modifyUsername, modifyActivationState: BOOLEAN; request: HTTPSupport.HTTPRequest; params: DynamicWebpage.ParameterList; VAR statusMsg: XML.Content): BOOLEAN; 
	PROCEDURE ^ GetActivationEditRow(isCurrentlyActivated: BOOLEAN): XML.Content; 
	PROCEDURE ^ DeleteFromAllDomains(account: WebAccount); 
	PROCEDURE ^ LoadPrevalenceSystem; 
	PROCEDURE ^ ReadWebAdministratorInfo; 
	PROCEDURE ^ GetNewWebAccount(): PrevalenceSystem.PersistentObject; 
	PROCEDURE ^ GetNewAuthorizationDomain(): PrevalenceSystem.PersistentObject; 
	PROCEDURE ^ GetPersistentObjectDescriptors*(): PrevalenceSystem.PersistentObjectDescSet; 
	PROCEDURE ^ CreateWebAccountDatagridElement(): DynamicWebpage.ActiveElement; 
	PROCEDURE ^ CreateAuthDomainDatagridElement(): DynamicWebpage.ActiveElement; 
	PROCEDURE ^ CreateAuthenticationFormElement(): DynamicWebpage.ActiveElement; 
	PROCEDURE ^ CreateAuthorizationCheckElement(): DynamicWebpage.ActiveElement; 
	PROCEDURE ^ CreateAuthAsAdminCheckElement(): DynamicWebpage.ActiveElement; 
	PROCEDURE ^ CreateWebAccountViewElement(): DynamicWebpage.ActiveElement; 
	PROCEDURE ^ CreateGetUserNameElement(): DynamicWebpage.ActiveElement; 
	PROCEDURE ^ CreateDispNewEntriesElement(): DynamicWebpage.ActiveElement; 
	PROCEDURE ^ CreateIsAdministratorElement(): DynamicWebpage.ActiveElement; 
	PROCEDURE ^ CreateIsAuthorizedElement(): DynamicWebpage.ActiveElement; 
	PROCEDURE ^ CreateNewUserFormularElement(): DynamicWebpage.ActiveElement; 
	PROCEDURE ^ GetActiveElementDescriptors*(): DynamicWebpage.ActiveElementDescSet; 
BEGIN
END WebAccounts.
