MODULE PositionDebugging;
	IMPORT Strings, WMComponents, WM := WMWindowManager, WMGraphics, WMGraphicUtilities, WMPopups, WMProperties, WMMessages, WMStandardComponents, Objects;
CONST 
TYPE 
	DebugWindow = OBJECT {EXCLUSIVE} (WMComponents.FormWindow)
	VAR 
		dragging: BOOLEAN; 
		lastX, lastY: SIZE; 
		debugComponent: DebugComponent; 
		contextMenu: WMPopups.Popup; 

		PROCEDURE ^  & New*; 
		PROCEDURE ^ {OVERRIDE} PointerDown*(x, y: SIZE; keys: SET); 
		PROCEDURE ^ HandleClose(sender, par: ANY ); 
		PROCEDURE ^ {OVERRIDE} PointerMove*(x, y: SIZE; keys: SET); 
		PROCEDURE ^ {OVERRIDE} PointerUp*(x, y: SIZE; Keys: SET); 
		PROCEDURE ^ {OVERRIDE} Handle*(VAR x: WMMessages.Message); 
		PROCEDURE ^ ChangePos(realPos, bidiPos: SIZE); 
	END DebugWindow; 

	DebugComponent* = OBJECT {EXCLUSIVE} (WMComponents.VisualComponent)
	VAR 
		str: Strings.String; 
		viewMode*, color*: WMProperties.Int32Property; 

		PROCEDURE ^ {OVERRIDE} DrawBackground*(canvas: WMGraphics.Canvas); 
		PROCEDURE ^ {OVERRIDE} PropertyChanged*(sender, property: ANY ); 
		PROCEDURE ^  & Init*; 
		PROCEDURE ^ {OVERRIDE} Initialize*; 
	END DebugComponent; 

	DebugWindowNode = OBJECT 
	VAR 
		debugWindow: DebugWindow; 
		next: DebugWindowNode; 

		PROCEDURE ^  & New*(dw: DebugWindow); 
	END DebugWindowNode; 
VAR 
	debugWindow: DebugWindow; 
	firstNode, lastNode: DebugWindowNode; 
	StrDebugComponent: Strings.String; 
	prototypeColor: WMProperties.Int32Property; 

	PROCEDURE ^ AppendToList(debugWindow: DebugWindow); 
	PROCEDURE ^ Open*; 
	PROCEDURE ^ CloseAll*; 
	PROCEDURE ^ SetPos*(realPos, bidiPos: SIZE); 
BEGIN
END PositionDebugging.
